#!/bin/bash

# sphinxtuner - Comprehensive performance analyzer for SphinxSearch

# Check if mysql client is installed
if ! command -v mysql &> /dev/null; then
    echo "Error: 'mysql' command not found. Please ensure it is installed."
    exit 1
fi

# Function to run SphinxQL queries
run_sphinxql() {
    mysql -h 127.0.0.1 -P 9306 -Ns -e "$1" 2>/dev/null
}

# Function to get values from sphinx.conf
get_config_value() {
    grep -E "^$1\s*=" /etc/sphinxsearch/sphinx.conf | head -n 1 | awk -F '=' '{print $2}' | xargs
}

# Get Sphinx status
status=$(run_sphinxql "SHOW STATUS")
if [ -z "$status" ]; then
    echo "Error: Failed to retrieve Sphinx status. Ensure Sphinx is running and accessible on localhost:9306."
    exit 1
fi

# Parse status data
uptime=$(echo "$status" | grep '^uptime' | awk '{print $2}')
queries=$(echo "$status" | grep '^queries' | awk '{print $2}')
avg_query_wall=$(echo "$status" | grep '^avg_query_wall' | awk '{print $2}')
local_ram_mb=$(echo "$status" | grep '^local_ram_mb' | awk '{print $2}')
local_disk_mb=$(echo "$status" | grep '^local_disk_mb' | awk '{print $2}')
connections=$(echo "$status" | grep '^connections' | awk '{print $2}')

# Get configuration parameters (searchd section)
mem_limit=$(get_config_value "mem_limit")
workers=$(get_config_value "workers")
net_workers=$(get_config_value "net_workers")
max_matches=$(get_config_value "max_matches")
read_timeout=$(get_config_value "read_timeout")
write_timeout=$(get_config_value "write_timeout")
max_iops=$(get_config_value "max_iops")
max_iosize=$(get_config_value "max_iosize")
query_log_format=$(get_config_value "query_log_format")
query_cache_size=$(get_config_value "query_cache_size")

# Get configuration parameters (indexer section)
indexer_mem_limit=$(get_config_value "mem_limit")
indexer_threads=$(get_config_value "threads")
max_file_field_buffer=$(get_config_value "max_file_field_buffer")
lemmatizer_cache=$(get_config_value "lemmatizer_cache")
html_strip=$(get_config_value "html_strip")
morphology=$(get_config_value "morphology")
dict=$(get_config_value "dict")

# Get system information
total_ram_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
total_ram_mb=$((total_ram_kb / 1024))

# Output report
echo "SphinxTuner v1.0"
echo "-------------------------"
echo "System Information:"
echo "Total RAM: ${total_ram_mb} MB"
echo "Sphinx Uptime: $(($uptime / 3600)) hours $(($uptime % 3600 / 60)) minutes"
echo "Connections: $connections"
echo "Queries Executed: $queries"
echo "Average Query Time: ${avg_query_wall} seconds"
echo "RAM Used by Sphinx: ${local_ram_mb} MB"
echo "Index Size on Disk: ${local_disk_mb} MB"

# Configuration details (searchd section)
echo ""
echo "Configuration Details (searchd):"
echo "mem_limit: ${mem_limit:-Not set}"
echo "workers: ${workers:-Not set}"
echo "net_workers: ${net_workers:-Not set}"
echo "max_matches: ${max_matches:-Not set}"
echo "read_timeout: ${read_timeout:-Not set}"
echo "write_timeout: ${write_timeout:-Not set}"
echo "max_iops: ${max_iops:-Not set}"
echo "max_iosize: ${max_iosize:-Not set}"
echo "query_log_format: ${query_log_format:-Not set}"
echo "query_cache_size: ${query_cache_size:-Not set}"

# Configuration details (indexer section)
echo ""
echo "Configuration Details (indexer):"
echo "mem_limit: ${indexer_mem_limit:-Not set}"
echo "threads: ${indexer_threads:-Not set}"
echo "max_file_field_buffer: ${max_file_field_buffer:-Not set}"
echo "lemmatizer_cache: ${lemmatizer_cache:-Not set}"
echo "html_strip: ${html_strip:-Not set}"
echo "morphology: ${morphology:-Not set}"
echo "dict: ${dict:-Not set}"

# Analysis and recommendations
echo ""
echo "Performance Analysis:"

recommendations=()

# Searchd recommendations
if (( $(echo "$avg_query_wall > 0.01" | bc -l) )); then
    recommendations+=("- Average query time is high ($avg_query_wall sec). Consider increasing mem_limit or optimizing queries.")
fi

if [ -z "$mem_limit" ] || (( $(echo "$mem_limit < $local_disk_mb" | bc -l) )); then
    recommendations+=("- mem_limit is too low ($mem_limit MB). It is recommended to set it to at least ${local_disk_mb} MB.")
fi

if [ -z "$workers" ] || [ "$workers" != "threads" ]; then
    recommendations+=("- workers is not set to 'threads'. For optimal performance, consider using 'threads' mode.")
fi

if [ -z "$net_workers" ] || (( net_workers < 2 )); then
    recommendations+=("- net_workers is too low ($net_workers). For better network performance, consider increasing it to at least 2.")
fi

if [ -z "$max_matches" ] || (( max_matches < 1000 )); then
    recommendations+=("- max_matches is too low ($max_matches). For large datasets, consider increasing it to at least 1000.")
fi

if [ -z "$read_timeout" ] || (( read_timeout < 5 )); then
    recommendations+=("- read_timeout is too low ($read_timeout). Consider increasing it to at least 5 seconds for stability.")
fi

if [ -z "$write_timeout" ] || (( write_timeout < 5 )); then
    recommendations+=("- write_timeout is too low ($write_timeout). Consider increasing it to at least 5 seconds for stability.")
fi

if [ -z "$max_iops" ] || (( max_iops < 40 )); then
    recommendations+=("- max_iops is too low ($max_iops). For SSDs, consider increasing it to at least 40.")
fi

if [ -z "$max_iosize" ] || (( max_iosize < 1 )); then
    recommendations+=("- max_iosize is too low ($max_iosize). For optimal I/O performance, consider increasing it to at least 1 MB.")
fi

if [ -z "$query_cache_size" ]; then
    recommendations+=("- query_cache_size is not enabled. Consider enabling query caching for frequently executed queries.")
fi

# Indexer recommendations
if [ -z "$indexer_mem_limit" ] || (( $(echo "$indexer_mem_limit < $local_disk_mb" | bc -l) )); then
    recommendations+=("- indexer mem_limit is too low ($indexer_mem_limit MB). It is recommended to set it to at least ${local_disk_mb} MB.")
fi

if [ -z "$indexer_threads" ] || (( indexer_threads < 4 )); then
    recommendations+=("- Number of indexer threads (threads) is too low ($indexer_threads). It is recommended to increase it to the number of CPU cores.")
fi

if [ -z "$max_file_field_buffer" ] || (( max_file_field_buffer < 8 )); then
    recommendations+=("- max_file_field_buffer is too low ($max_file_field_buffer MB). Consider increasing it to at least 8 MB for large file fields.")
fi

if [ -z "$lemmatizer_cache" ] || (( lemmatizer_cache < 256 )); then
    recommendations+=("- lemmatizer_cache is too low ($lemmatizer_cache MB). Consider increasing it to at least 256 MB for better performance with morphology.")
fi

if [ -z "$html_strip" ] || [ "$html_strip" != "1" ]; then
    recommendations+=("- html_strip is not enabled. Consider enabling it if your data contains HTML content.")
fi

if [ -z "$morphology" ]; then
    recommendations+=("- morphology is not set. Consider enabling it for better text processing (e.g., stem_en, stem_ru).")
fi

if [ -z "$dict" ] || [ "$dict" != "keywords" ]; then
    recommendations+=("- dict is not set to 'keywords'. Consider using 'keywords' for faster indexing.")
fi

# Output recommendations
if [ ${#recommendations[@]} -eq 0 ]; then
    echo "No optimization recommendations. Your Sphinx configuration appears to be well-optimized!"
else
    echo "Optimization Recommendations:"
    for rec in "${recommendations[@]}"; do
        echo "$rec"
    done
fi

# Conclusion
echo ""
echo "Analysis completed. Use the recommendations above to improve Sphinx performance."
